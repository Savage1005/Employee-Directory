{"version":3,"sources":["Header/index.js","DataTable/index.js","Utils/Api.js","SearchNames/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","DataTable","props","className","type","onClick","sorted","employeeList","length","map","employee","src","picture","thumbnail","alt","name","first","last","phone","email","moment","dob","date","format","axios","get","SearchNames","value","searchName","onChange","handleChange","App","state","sortDirection","originalList","newEmployeeList","sort","a","b","setState","localeCompare","event","target","console","log","filter","toLowerCase","includes","Api","then","data","results","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+SAaeA,MAXf,WACA,OACI,oCACA,kDACA,0D,iBCsCWC,MAlCf,SAAmBC,GAEf,OACD,2BAAOC,UAAW,oBACnB,+BACE,4BACE,qCACA,wBAAIC,KAAK,SAASC,QAASH,EAAMI,QAAjC,QACA,qCACA,qCACA,qCAGJ,+BACKJ,EAAMK,aAAaC,OAAO,EAAGN,EAAMK,aAAaE,KAAI,SAAAC,GACjD,OACE,4BACA,4BAAI,yBAAKC,IAAKD,EAASE,QAAQC,UAAWC,IAAI,cAC9C,4BAAKJ,EAASK,KAAKC,MAAM,IAAIN,EAASK,KAAKE,MAC3C,4BAAKP,EAASQ,OACd,4BAAKR,EAASS,OACd,4BAAKC,IAAOV,EAASW,IAAIC,KAAK,cAAcC,OAAO,mBAGpD,M,iBChCI,EACE,WACT,OAAOC,IAAMC,IAAI,0CCOVC,MATd,SAAsBxB,GAClB,OACI,oEAC+B,2BAAOE,KAAM,OAAOW,KAAK,aAAaY,MAAOzB,EAAM0B,WAAYC,SAAU3B,EAAM4B,iBC4DxGC,E,4MAzDbC,MAAQ,CACNzB,aAAa,GACb0B,cAAe,EACfL,WAAY,GACZM,aAAc,I,EAYjB5B,OAAS,WAER,IAAM6B,EAAkB,EAAKH,MAAMzB,aAAa6B,MAAK,SAACC,EAAIC,GAC1D,OAAiC,IAA7B,EAAKN,MAAMC,eACb,EAAKM,SAAS,CAACN,cAAc,IACtBI,EAAEtB,KAAKC,MAAMwB,cAAcF,EAAEvB,KAAKC,SAGzC,EAAKuB,SAAS,CAACN,cAAe,IACvBK,EAAEvB,KAAKC,MAAMwB,cAAcH,EAAEtB,KAAKC,WAI3C,EAAKuB,SAAS,CAAChC,aAAc4B,K,EAG/BL,aAAa,SAAAW,GAAQ,IAAD,EACOA,EAAMC,OAAlB3B,EADK,EACLA,KAAKY,EADA,EACAA,MAEZ,EAAKY,SAAL,eACGxB,EAAMY,IAGTgB,QAAQC,IAAIjB,GACZ,IAAMQ,EAAgB,EAAKH,MAAME,aAAaW,QAAO,SAAAnC,GACnD,OAAOA,EAASK,KAAKC,MAAM8B,cAAcC,SAASpB,EAAMmB,kBAE1D,EAAKP,SAAS,CAAChC,aAAa4B,K,kEApChB,IAAD,OACnBa,IAAkBC,MAAK,SAAAvC,GACrB,EAAK6B,SAAS,CACZhC,aAAaG,EAASwC,KAAKC,QAC3BjB,aAAaxB,EAASwC,KAAKC,e,+BAmC3B,OACA,oCACCR,QAAQC,IAAKQ,KAAKpB,MAAMzB,cACzB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAauB,aAAcsB,KAAKtB,aAAcF,WAAYwB,KAAKpB,MAAMJ,aACrE,kBAAC,EAAD,CAAYrB,aAAc6C,KAAKpB,MAAMzB,aAAcD,OAAS8C,KAAK9C,c,GApDnD+C,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.568b4aaa.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header(){\nreturn (\n    <>\n    <h1>Employee Directory</h1>\n    <p>Click on the name to sort</p>\n    </>\n)\n}\n\n\n\nexport default Header","import React from 'react'\r\nimport moment from 'moment'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction DataTable(props){\r\n  \r\n    return (\r\n   <table className =\"table responsive\">\r\n  <thead>\r\n    <tr>\r\n      <th>Image</th>\r\n      <th type=\"button\" onClick={props.sorted}>Name</th>\r\n      <th>Phone</th>\r\n      <th>Email</th>\r\n      <th>DOB</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n      {props.employeeList.length>0? props.employeeList.map(employee=>{\r\n          return(\r\n            <tr>\r\n            <td><img src={employee.picture.thumbnail} alt=\"employee\"/></td>\r\n            <td>{employee.name.first+\" \"+employee.name.last}</td>\r\n            <td>{employee.phone}</td>\r\n            <td>{employee.email}</td>\r\n            <td>{moment(employee.dob.date,\"YYYY-MM-DD\").format(\"MM-DD-YYYY\")}</td>\r\n        </tr>\r\n          )\r\n      }) : \"\" }\r\n  \r\n  </tbody>\r\n  </table>\r\n\r\n    \r\n    )\r\n}\r\n\r\n\r\nexport default DataTable","import axios from \"axios\"\r\n \r\nexport default {\r\n    getEmployee: function(){\r\n        return axios.get(\"https://randomuser.me/api/?results=50\")\r\n\r\n    }\r\n}","import React  from 'react'\r\n\r\n function SearchNames (props){\r\n     return (\r\n         <>\r\n           Search for Employee by name: <input type= \"text\" name=\"searchName\" value={props.searchName} onChange={props.handleChange}/>\r\n         </>\r\n     )\r\n }\r\n\r\n\r\nexport default SearchNames","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header'\nimport DataTable from './DataTable'\nimport Api from './Utils/Api'\nimport SearchNames from './SearchNames'\n\nclass App extends Component {\n  state = {\n    employeeList:[],\n    sortDirection: 1,\n    searchName: \"\",\n    originalList: []\n  }\n\ncomponentDidMount(){\nApi.getEmployee().then(employee=>{\n  this.setState({\n    employeeList:employee.data.results,\n    originalList:employee.data.results\n  })\n})\n }\n\n sorted = ()=>{\n \n  const newEmployeeList=  this.state.employeeList.sort((a , b) => {\n  if (this.state.sortDirection === 1){\n    this.setState({sortDirection:0})\n    return a.name.first.localeCompare(b.name.first)\n\n  }else {\n    this.setState({sortDirection: 1})\n    return b.name.first.localeCompare(a.name.first)\n  }\n  })\n\n  this.setState({employeeList: newEmployeeList})\n\n}\nhandleChange=event=>{\n        const {name,value}=event.target\n\n        this.setState({\n          [name]:value\n        })\n\n        console.log(value)\n        const newEmployeeList=this.state.originalList.filter(employee=>{\n          return employee.name.first.toLowerCase().includes(value.toLowerCase())\n        })\n        this.setState({employeeList:newEmployeeList})\n}\nrender(){\n    return (\n    <>\n    {console.log (this.state.employeeList)}\n    <Header />\n    <SearchNames handleChange={this.handleChange} searchName={this.state.searchName}/>\n    <DataTable  employeeList={this.state.employeeList} sorted ={this.sorted} />\n    </>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}